From dc62f96b9c16fe77efbb7bbaf2ac512f8f8477d3 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Tue, 22 Mar 2016 23:41:34 -0400
Subject: [PATCH] Paper -> Optimize isValidLocation for inlining

isValidLocation 是一个非常简单的函数，但是它被调用的频率极高，这份优化可以减少每次调用中的 6 次 call，并在部分返回 false 的情况下减少几次判断次数。
Link：https://github.com/PaperMC/Paper/blob/master/Spigot-Server-Patches/0107-Optimize-isValidLocation-for-inlining.patch

diff --git a/src/main/java/net/minecraft/server/BaseBlockPosition.java b/src/main/java/net/minecraft/server/BaseBlockPosition.java
index e54e7b7..58fd4ed 100644
--- a/src/main/java/net/minecraft/server/BaseBlockPosition.java
+++ b/src/main/java/net/minecraft/server/BaseBlockPosition.java
@@ -8,7 +8,9 @@ public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
     private final int a;
     private final int c;
     private final int d;
-
+    public boolean isValidLocation() {
+        return this.c >= 0 && this.c < 256 && this.a >= -30000000 && this.d >= -30000000 && this.a < 30000000 && this.d < 30000000;
+    }
     public BaseBlockPosition(int i, int j, int k) {
         this.a = i;
         this.c = j;

diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index c2fc058..29722c8 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -255,8 +255,8 @@ public abstract class World implements IBlockAccess {
         return this.getType(blockposition1);
     }
 
-    private boolean isValidLocation(BlockPosition blockposition) {
-        return blockposition.getX() >= -30000000 && blockposition.getZ() >= -30000000 && blockposition.getX() < 30000000 && blockposition.getZ() < 30000000 && blockposition.getY() >= 0 && blockposition.getY() < 256;
+    private static boolean isValidLocation(BlockPosition blockposition) {
+        return blockposition.isValidLocation();
     }
 
     public boolean isEmpty(BlockPosition blockposition) {
@@ -268,7 +268,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public boolean a(BlockPosition blockposition, boolean flag) {
-        return !this.isValidLocation(blockposition) ? false : this.isChunkLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4, flag);
+        return !blockposition.isValidLocation() ? false : this.isChunkLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4, flag);
     }
 
     public boolean areChunksLoaded(BlockPosition blockposition, int i) {
@@ -348,7 +348,7 @@ public abstract class World implements IBlockAccess {
             return true;
         }
         // CraftBukkit end
-        if (!this.isValidLocation(blockposition)) {
+        if (!blockposition.isValidLocation()) {
             return false;
         } else if (!this.isClientSide && this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
             return false;
@@ -694,7 +694,7 @@ public abstract class World implements IBlockAccess {
             blockposition = new BlockPosition(blockposition.getX(), 0, blockposition.getZ());
         }
 
-        if (!this.isValidLocation(blockposition)) {
+        if (!blockposition.isValidLocation()) {
             return enumskyblock.c;
         } else if (!this.isLoaded(blockposition)) {
             return enumskyblock.c;
@@ -706,7 +706,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public void a(EnumSkyBlock enumskyblock, BlockPosition blockposition, int i) {
-        if (this.isValidLocation(blockposition)) {
+        if (blockposition.isValidLocation()) {
             if (this.isLoaded(blockposition)) {
                 Chunk chunk = this.getChunkAtWorldCoords(blockposition);
 
@@ -739,7 +739,7 @@ public abstract class World implements IBlockAccess {
             }
         }
         // CraftBukkit end
-        if (!this.isValidLocation(blockposition)) {
+        if (!blockposition.isValidLocation()) {
             return Blocks.AIR.getBlockData();
         } else {
             Chunk chunk = this.getChunkAtWorldCoords(blockposition);
@@ -1936,7 +1936,7 @@ public abstract class World implements IBlockAccess {
     public Map<BlockPosition, TileEntity> capturedTileEntities = Maps.newHashMap();
 
     public TileEntity getTileEntity(BlockPosition blockposition) {
-        if (!this.isValidLocation(blockposition)) {
+        if (!blockposition.isValidLocation()) {
             return null;
         } else {
             // CraftBukkit start
@@ -2039,7 +2039,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public boolean d(BlockPosition blockposition, boolean flag) {
-        if (!this.isValidLocation(blockposition)) {
+        if (!blockposition.isValidLocation()) {
             return flag;
         } else {
             Chunk chunk = this.chunkProvider.getLoadedChunkAt(blockposition.getX() >> 4, blockposition.getZ() >> 4);

-- 
2.7.4
