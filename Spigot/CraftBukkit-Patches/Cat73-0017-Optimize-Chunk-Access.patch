From 2abc0d00312f85e3dcef3520fc9cb106ae4bad3b Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Thu, 27 Aug 2015 01:15:02 -0400
Subject: [PATCH] Paper -> Optimize Chunk Access

getChunkAt 是一个热点方法，很多时候会在短时间内连续多次获取同一个区块，这里将最后一次被获取的区块缓存。
Link：https://github.com/PaperMC/Paper/blob/master/Spigot-Server-Patches/0105-Optimize-Chunk-Access.patch

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index ac35cf4..6e3d17b 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -30,6 +30,7 @@ public class Chunk {
     private boolean i;
     public final World world;
     public final int[] heightMap;
+    public final long chunkKey; // Paper
     public final int locX;
     public final int locZ;
     private boolean l;
@@ -97,6 +98,7 @@ public class Chunk {
         this.world = world;
         this.locX = i;
         this.locZ = j;
+        this.chunkKey = org.bukkit.craftbukkit.util.LongHash.toLong(this.locX, this.locZ); // Paper
         this.heightMap = new int[256];
 
         for (int k = 0; k < this.entitySlices.length; ++k) {

diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 83857a6..ec60d48 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -23,7 +23,25 @@ public class ChunkProviderServer implements IChunkProvider {
     public final LongHashSet unloadQueue = new LongHashSet(); // CraftBukkit - LongHashSet
     public final ChunkGenerator chunkGenerator; // CraftBukkit - public
     private final IChunkLoader chunkLoader;
-    public LongObjectHashMap<Chunk> chunks = new LongObjectHashMap<Chunk>(); // CraftBukkit
+    protected Chunk lastChunkByPos = null; // Paper
+    public LongObjectHashMap<Chunk> chunks = new LongObjectHashMap<Chunk>() {
+        @Override
+        public Chunk get(long key) {
+            if (lastChunkByPos != null && key == lastChunkByPos.chunkKey) {
+                return lastChunkByPos;
+            }
+            return lastChunkByPos = super.get(key);
+        }
+
+        @Override
+        public Chunk remove(long key) {
+            if (lastChunkByPos != null && key == lastChunkByPos.chunkKey) {
+                lastChunkByPos = null;
+            }
+            return super.remove(key);
+        }
+    }; // Paper
+    
     // private final LongHashMap<Chunk> chunks = new LongHashMap();
     // private final List<Chunk> chunkList = Lists.newArrayList();
     public final WorldServer world;

-- 
2.8.0.windows.1
