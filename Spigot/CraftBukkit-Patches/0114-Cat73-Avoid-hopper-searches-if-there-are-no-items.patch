From 5136c1db3de1466123e33f9d26f0275d3210874f Mon Sep 17 00:00:00 2001
From: Cat73 <root@cat73.org>
Date: Tue, 25 Feb 2020 23:39:58 +0800
Subject: [PATCH] Cat73 -> Avoid hopper searches if there are no items
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

如果区块中没有物品和漏斗矿车，则避免漏斗搜索它们

Link: https://github.com/PaperMC/Paper/blob/892f479fb4ef849ba834cbedd0069395cc1bef14/Spigot-Server-Patches/0392-Avoid-hopper-searches-if-there-are-no-items.patch

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 55373cae..3091c14e 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -50,6 +50,12 @@ public class Chunk implements IChunkAccess {
     private Consumer<Chunk> v;
     private final ChunkCoordIntPair loc;
     private volatile boolean x;
+    // Paper Start
+    // Track the number of minecarts and items
+    // Keep this synced with entitySlices.add() and entitySlices.remove()
+    private final int[] itemCounts = new int[16];
+    private final int[] inventoryEntityCounts = new int[16];
+    // Paper end
 
     public Chunk(World world, ChunkCoordIntPair chunkcoordintpair, BiomeStorage biomestorage) {
         this(world, chunkcoordintpair, biomestorage, ChunkConverter.a, TickListEmpty.b(), TickListEmpty.b(), 0L, (ChunkSection[]) null, (Consumer) null);
@@ -353,6 +359,13 @@ public class Chunk implements IChunkAccess {
         entity.chunkY = k;
         entity.chunkZ = this.loc.z;
         this.entitySlices[k].add(entity);
+        // Paper start
+        if (entity instanceof EntityItem) {
+            itemCounts[k]++;
+        } else if (entity instanceof IInventory) {
+            inventoryEntityCounts[k]++;
+        }
+        // Paper end
     }
 
     @Override
@@ -373,7 +386,16 @@ public class Chunk implements IChunkAccess {
             i = this.entitySlices.length - 1;
         }
 
-        this.entitySlices[i].remove(entity);
+        // Paper start
+        if (!this.entitySlices[i].remove(entity)) {
+            return;
+        }
+        if (entity instanceof EntityItem) {
+            itemCounts[i]--;
+        } else if (entity instanceof IInventory) {
+            inventoryEntityCounts[i]--;
+        }
+        // Paper end
     }
 
     @Override
@@ -618,9 +640,29 @@ public class Chunk implements IChunkAccess {
         i = MathHelper.clamp(i, 0, this.entitySlices.length - 1);
         j = MathHelper.clamp(j, 0, this.entitySlices.length - 1);
 
+        // Paper start
+        int[] counts;
+        if (EntityItem.class.isAssignableFrom(oclass)) {
+            counts = itemCounts;
+        } else if (IInventory.class.isAssignableFrom(oclass)) {
+            counts = inventoryEntityCounts;
+        } else {
+            counts = null;
+        }
+        // Paper end
         for (int k = i; k <= j; ++k) {
+            if (counts != null && counts[k] <= 0) continue; // Paper - Don't check a chunk if it doesn't have the type we are looking for
             Iterator iterator = this.entitySlices[k].iterator(); // Spigot
 
+            // Paper start - Don't search for inventories if we have none, and that is all we want
+            /*
+             * We check if they want inventories by seeing if it is the static `IEntitySelector.d`
+             *
+             * Make sure the inventory selector stays in sync.
+             * It should be the one that checks `var1 instanceof IInventory && var1.isAlive()`
+             */
+            if (predicate == IEntitySelector.d && inventoryEntityCounts[k] <= 0) continue;
+            // Paper end
             while (iterator.hasNext()) {
                 T t0 = (T) iterator.next(); // CraftBukkit - decompile error
 
-- 
2.25.0

