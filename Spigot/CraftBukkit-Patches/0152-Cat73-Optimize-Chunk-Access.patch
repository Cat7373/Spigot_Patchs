From 3226c0d6e585a64cd9751e970b22c473e446b817 Mon Sep 17 00:00:00 2001
From: Cat73 <cat7373x@gmail.com>
Date: Sun, 17 Jun 2018 08:32:50 +0800
Subject: [PATCH] Cat73 -> Optimize Chunk Access
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

缓存最近一次 get 的 Chunk
游戏有时会短时间那连续多次 get 同一个 Chunk，这里把最后一次 get 的 Chunk 做个缓存来在这种情况下减少开销
Link: https://github.com/PaperMC/Paper/blob/4f29a0ce0a470ae3ac6be1d69ee7843a78bb9ae1/Spigot-Server-Patches/0084-Optimize-Chunk-Access.patch

diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 86973cb9..ca0db3bf 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -26,7 +26,27 @@ public class ChunkProviderServer implements IChunkProvider {
     public final Set<Long> unloadQueue = Sets.newHashSet();
     public final ChunkGenerator chunkGenerator;
     private final IChunkLoader chunkLoader;
-    public final Long2ObjectMap<Chunk> chunks = new Long2ObjectOpenHashMap(8192);
+    // Paper start
+    public final Long2ObjectMap<Chunk> chunks = new Long2ObjectOpenHashMap<Chunk>(8192) {
+        private Chunk lastChunkByPos = null;
+
+        @Override
+        public Chunk get(long key) {
+            if (lastChunkByPos != null && key == lastChunkByPos.chunkKey) {
+                return lastChunkByPos;
+            }
+            return lastChunkByPos = super.get(key);
+        }
+
+        @Override
+        public Chunk remove(long key) {
+            if (lastChunkByPos != null && key == lastChunkByPos.chunkKey) {
+                lastChunkByPos = null;
+            }
+            return super.remove(key);
+        }
+    };
+    // Paper end
     public final WorldServer world;
 
     public ChunkProviderServer(WorldServer worldserver, IChunkLoader ichunkloader, ChunkGenerator chunkgenerator) {
-- 
2.15.2 (Apple Git-101.1)

