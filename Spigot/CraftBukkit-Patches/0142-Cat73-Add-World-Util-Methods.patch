From 756f975da13119fdfa6859ea74fc6ecd3bff1bcd Mon Sep 17 00:00:00 2001
From: Cat73 <cat7373x@gmail.com>
Date: Sat, 16 Jun 2018 08:52:34 +0800
Subject: [PATCH] Cat73 -> Add World Util Methods
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

给 World 和 Chunk 增加一些工具方法
Link: https://github.com/PaperMC/Paper/blob/4f29a0ce0a470ae3ac6be1d69ee7843a78bb9ae1/Spigot-Server-Patches/0074-Add-World-Util-Methods.patch

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 4bbebb25..6047a3c3 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -562,6 +562,7 @@ public class Chunk {
 
     }
 
+    public final int getLightSubtracted(BlockPosition blockposition, int i) { return this.a(blockposition, i); } // Paper - OBFHELPER
     public int a(BlockPosition blockposition, int i) {
         int j = blockposition.getX() & 15;
         int k = blockposition.getY();
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 740633d9..1991b549 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -69,7 +69,7 @@ public abstract class World implements IBlockAccess {
     public final List<Entity> j = Lists.newArrayList();
     protected final IntHashMap<Entity> entitiesById = new IntHashMap();
     private final long K = 16777215L;
-    private int L;
+    private int L; private int getSkylightSubtracted() { return this.L; } // Paper - OBFHELPER
     protected int l = (new Random()).nextInt();
     protected final int m = 1013904223;
     protected float n;
@@ -145,6 +145,12 @@ public abstract class World implements IBlockAccess {
         return (CraftServer) Bukkit.getServer();
     }
 
+    // Paper start
+    public Chunk getChunkIfLoaded(BlockPosition blockposition) {
+        return ((ChunkProviderServer) this.chunkProvider).getChunkIfLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4);
+    }
+    // Paper end
+
     public Chunk getChunkIfLoaded(int x, int z) {
         return ((ChunkProviderServer) this.chunkProvider).getChunkIfLoaded(x, z);
     }
@@ -792,6 +798,27 @@ public abstract class World implements IBlockAccess {
         return this.worldProvider.o()[this.getLightLevel(blockposition)];
     }
 
+    // Paper start - reduces need to do isLoaded before getType
+    public IBlockData getTypeIfLoaded(BlockPosition blockposition) {
+        // CraftBukkit start - tree generation
+        if (captureTreeGeneration) {
+            Iterator<BlockState> it = capturedBlockStates.iterator();
+            while (it.hasNext()) {
+                BlockState previous = it.next();
+                if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
+                    return CraftMagicNumbers.getBlock(previous.getTypeId()).fromLegacyData(previous.getRawData());
+                }
+            }
+        }
+        // CraftBukkit end
+        Chunk chunk = this.getChunkIfLoaded(blockposition);
+        if (chunk != null) {
+            return this.isValidLocation(blockposition) ? chunk.getBlockData(blockposition) : Blocks.AIR.getBlockData();
+        }
+        return null;
+    }
+    // Paper end
+
     public IBlockData getType(BlockPosition blockposition) {
         // CraftBukkit start - tree generation
         if (captureTreeGeneration) {
-- 
2.15.2 (Apple Git-101.1)

