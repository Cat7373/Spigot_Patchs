From 8308b7e68e4b7011fb9b41b5be6fe2e4c517074e Mon Sep 17 00:00:00 2001
From: Cat73 <root@cat73.org>
Date: Tue, 13 Oct 2020 22:13:33 +0800
Subject: [PATCH] Cat73 -> Auto import mc-dev


diff --git a/src/main/java/net/minecraft/server/BaseBlockPosition.java b/src/main/java/net/minecraft/server/BaseBlockPosition.java
new file mode 100644
index 00000000..7f803529
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BaseBlockPosition.java
@@ -0,0 +1,141 @@
+package net.minecraft.server;
+
+import com.google.common.base.MoreObjects;
+import com.mojang.serialization.Codec;
+import java.util.stream.IntStream;
+import javax.annotation.concurrent.Immutable;
+
+@Immutable
+public class BaseBlockPosition implements Comparable<BaseBlockPosition> {
+
+    public static final Codec<BaseBlockPosition> c = Codec.INT_STREAM.comapFlatMap((intstream) -> {
+        return SystemUtils.a(intstream, 3).map((aint) -> {
+            return new BaseBlockPosition(aint[0], aint[1], aint[2]);
+        });
+    }, (baseblockposition) -> {
+        return IntStream.of(new int[]{baseblockposition.getX(), baseblockposition.getY(), baseblockposition.getZ()});
+    });
+    public static final BaseBlockPosition ZERO = new BaseBlockPosition(0, 0, 0);
+    private int a;
+    private int b;
+    private int e;
+
+    public BaseBlockPosition(int i, int j, int k) {
+        this.a = i;
+        this.b = j;
+        this.e = k;
+    }
+
+    public BaseBlockPosition(double d0, double d1, double d2) {
+        this(MathHelper.floor(d0), MathHelper.floor(d1), MathHelper.floor(d2));
+    }
+
+    public boolean equals(Object object) {
+        if (this == object) {
+            return true;
+        } else if (!(object instanceof BaseBlockPosition)) {
+            return false;
+        } else {
+            BaseBlockPosition baseblockposition = (BaseBlockPosition) object;
+
+            return this.getX() != baseblockposition.getX() ? false : (this.getY() != baseblockposition.getY() ? false : this.getZ() == baseblockposition.getZ());
+        }
+    }
+
+    public int hashCode() {
+        return (this.getY() + this.getZ() * 31) * 31 + this.getX();
+    }
+
+    public int compareTo(BaseBlockPosition baseblockposition) {
+        return this.getY() == baseblockposition.getY() ? (this.getZ() == baseblockposition.getZ() ? this.getX() - baseblockposition.getX() : this.getZ() - baseblockposition.getZ()) : this.getY() - baseblockposition.getY();
+    }
+
+    public int getX() {
+        return this.a;
+    }
+
+    public int getY() {
+        return this.b;
+    }
+
+    public int getZ() {
+        return this.e;
+    }
+
+    protected void o(int i) {
+        this.a = i;
+    }
+
+    protected void p(int i) {
+        this.b = i;
+    }
+
+    protected void q(int i) {
+        this.e = i;
+    }
+
+    public BaseBlockPosition up() {
+        return this.up(1);
+    }
+
+    public BaseBlockPosition up(int i) {
+        return this.shift(EnumDirection.UP, i);
+    }
+
+    public BaseBlockPosition down() {
+        return this.down(1);
+    }
+
+    public BaseBlockPosition down(int i) {
+        return this.shift(EnumDirection.DOWN, i);
+    }
+
+    public BaseBlockPosition shift(EnumDirection enumdirection, int i) {
+        return i == 0 ? this : new BaseBlockPosition(this.getX() + enumdirection.getAdjacentX() * i, this.getY() + enumdirection.getAdjacentY() * i, this.getZ() + enumdirection.getAdjacentZ() * i);
+    }
+
+    public BaseBlockPosition d(BaseBlockPosition baseblockposition) {
+        return new BaseBlockPosition(this.getY() * baseblockposition.getZ() - this.getZ() * baseblockposition.getY(), this.getZ() * baseblockposition.getX() - this.getX() * baseblockposition.getZ(), this.getX() * baseblockposition.getY() - this.getY() * baseblockposition.getX());
+    }
+
+    public boolean a(BaseBlockPosition baseblockposition, double d0) {
+        return this.distanceSquared((double) baseblockposition.getX(), (double) baseblockposition.getY(), (double) baseblockposition.getZ(), false) < d0 * d0;
+    }
+
+    public boolean a(IPosition iposition, double d0) {
+        return this.distanceSquared(iposition.getX(), iposition.getY(), iposition.getZ(), true) < d0 * d0;
+    }
+
+    public double j(BaseBlockPosition baseblockposition) {
+        return this.distanceSquared((double) baseblockposition.getX(), (double) baseblockposition.getY(), (double) baseblockposition.getZ(), true);
+    }
+
+    public double a(IPosition iposition, boolean flag) {
+        return this.distanceSquared(iposition.getX(), iposition.getY(), iposition.getZ(), flag);
+    }
+
+    public double distanceSquared(double d0, double d1, double d2, boolean flag) {
+        double d3 = flag ? 0.5D : 0.0D;
+        double d4 = (double) this.getX() + d3 - d0;
+        double d5 = (double) this.getY() + d3 - d1;
+        double d6 = (double) this.getZ() + d3 - d2;
+
+        return d4 * d4 + d5 * d5 + d6 * d6;
+    }
+
+    public int k(BaseBlockPosition baseblockposition) {
+        float f = (float) Math.abs(baseblockposition.getX() - this.getX());
+        float f1 = (float) Math.abs(baseblockposition.getY() - this.getY());
+        float f2 = (float) Math.abs(baseblockposition.getZ() - this.getZ());
+
+        return (int) (f + f1 + f2);
+    }
+
+    public int a(EnumDirection.EnumAxis enumdirection_enumaxis) {
+        return enumdirection_enumaxis.a(this.a, this.b, this.e);
+    }
+
+    public String toString() {
+        return MoreObjects.toStringHelper(this).add("x", this.getX()).add("y", this.getY()).add("z", this.getZ()).toString();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ChunkSection.java b/src/main/java/net/minecraft/server/ChunkSection.java
new file mode 100644
index 00000000..b0f7ea97
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ChunkSection.java
@@ -0,0 +1,148 @@
+package net.minecraft.server;
+
+import java.util.function.Predicate;
+import javax.annotation.Nullable;
+
+public class ChunkSection {
+
+    public static final DataPalette<IBlockData> GLOBAL_PALETTE = new DataPaletteGlobal<>(Block.REGISTRY_ID, Blocks.AIR.getBlockData());
+    private final int yPos;
+    private short nonEmptyBlockCount;
+    private short tickingBlockCount;
+    private short e;
+    private final DataPaletteBlock<IBlockData> blockIds;
+
+    public ChunkSection(int i) {
+        this(i, (short) 0, (short) 0, (short) 0);
+    }
+
+    public ChunkSection(int i, short short0, short short1, short short2) {
+        this.yPos = i;
+        this.nonEmptyBlockCount = short0;
+        this.tickingBlockCount = short1;
+        this.e = short2;
+        this.blockIds = new DataPaletteBlock<>(ChunkSection.GLOBAL_PALETTE, Block.REGISTRY_ID, GameProfileSerializer::c, GameProfileSerializer::a, Blocks.AIR.getBlockData());
+    }
+
+    public IBlockData getType(int i, int j, int k) {
+        return (IBlockData) this.blockIds.a(i, j, k);
+    }
+
+    public Fluid b(int i, int j, int k) {
+        return ((IBlockData) this.blockIds.a(i, j, k)).getFluid();
+    }
+
+    public void a() {
+        this.blockIds.a();
+    }
+
+    public void b() {
+        this.blockIds.b();
+    }
+
+    public IBlockData setType(int i, int j, int k, IBlockData iblockdata) {
+        return this.setType(i, j, k, iblockdata, true);
+    }
+
+    public IBlockData setType(int i, int j, int k, IBlockData iblockdata, boolean flag) {
+        IBlockData iblockdata1;
+
+        if (flag) {
+            iblockdata1 = (IBlockData) this.blockIds.setBlock(i, j, k, iblockdata);
+        } else {
+            iblockdata1 = (IBlockData) this.blockIds.b(i, j, k, iblockdata);
+        }
+
+        Fluid fluid = iblockdata1.getFluid();
+        Fluid fluid1 = iblockdata.getFluid();
+
+        if (!iblockdata1.isAir()) {
+            --this.nonEmptyBlockCount;
+            if (iblockdata1.isTicking()) {
+                --this.tickingBlockCount;
+            }
+        }
+
+        if (!fluid.isEmpty()) {
+            --this.e;
+        }
+
+        if (!iblockdata.isAir()) {
+            ++this.nonEmptyBlockCount;
+            if (iblockdata.isTicking()) {
+                ++this.tickingBlockCount;
+            }
+        }
+
+        if (!fluid1.isEmpty()) {
+            ++this.e;
+        }
+
+        return iblockdata1;
+    }
+
+    public boolean c() {
+        return this.nonEmptyBlockCount == 0;
+    }
+
+    public static boolean a(@Nullable ChunkSection chunksection) {
+        return chunksection == Chunk.a || chunksection.c();
+    }
+
+    public boolean d() {
+        return this.shouldTick() || this.f();
+    }
+
+    public boolean shouldTick() {
+        return this.tickingBlockCount > 0;
+    }
+
+    public boolean f() {
+        return this.e > 0;
+    }
+
+    public int getYPosition() {
+        return this.yPos;
+    }
+
+    public void recalcBlockCounts() {
+        this.nonEmptyBlockCount = 0;
+        this.tickingBlockCount = 0;
+        this.e = 0;
+        this.blockIds.a((iblockdata, i) -> {
+            Fluid fluid = iblockdata.getFluid();
+
+            if (!iblockdata.isAir()) {
+                this.nonEmptyBlockCount = (short) (this.nonEmptyBlockCount + i);
+                if (iblockdata.isTicking()) {
+                    this.tickingBlockCount = (short) (this.tickingBlockCount + i);
+                }
+            }
+
+            if (!fluid.isEmpty()) {
+                this.nonEmptyBlockCount = (short) (this.nonEmptyBlockCount + i);
+                if (fluid.f()) {
+                    this.e = (short) (this.e + i);
+                }
+            }
+
+        });
+    }
+
+    public DataPaletteBlock<IBlockData> getBlocks() {
+        return this.blockIds;
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) {
+        packetdataserializer.writeShort(this.nonEmptyBlockCount);
+        this.blockIds.b(packetdataserializer);
+    }
+
+    public int j() {
+        return 2 + this.blockIds.c();
+    }
+
+    public boolean a(Predicate<IBlockData> predicate) {
+        return this.blockIds.contains(predicate);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/DataBits.java b/src/main/java/net/minecraft/server/DataBits.java
new file mode 100644
index 00000000..c4d5ad5d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/DataBits.java
@@ -0,0 +1,113 @@
+package net.minecraft.server;
+
+import java.util.function.IntConsumer;
+import javax.annotation.Nullable;
+import org.apache.commons.lang3.Validate;
+
+public class DataBits {
+
+    private static final int[] a = new int[]{-1, -1, 0, Integer.MIN_VALUE, 0, 0, 1431655765, 1431655765, 0, Integer.MIN_VALUE, 0, 1, 858993459, 858993459, 0, 715827882, 715827882, 0, 613566756, 613566756, 0, Integer.MIN_VALUE, 0, 2, 477218588, 477218588, 0, 429496729, 429496729, 0, 390451572, 390451572, 0, 357913941, 357913941, 0, 330382099, 330382099, 0, 306783378, 306783378, 0, 286331153, 286331153, 0, Integer.MIN_VALUE, 0, 3, 252645135, 252645135, 0, 238609294, 238609294, 0, 226050910, 226050910, 0, 214748364, 214748364, 0, 204522252, 204522252, 0, 195225786, 195225786, 0, 186737708, 186737708, 0, 178956970, 178956970, 0, 171798691, 171798691, 0, 165191049, 165191049, 0, 159072862, 159072862, 0, 153391689, 153391689, 0, 148102320, 148102320, 0, 143165576, 143165576, 0, 138547332, 138547332, 0, Integer.MIN_VALUE, 0, 4, 130150524, 130150524, 0, 126322567, 126322567, 0, 122713351, 122713351, 0, 119304647, 119304647, 0, 116080197, 116080197, 0, 113025455, 113025455, 0, 110127366, 110127366, 0, 107374182, 107374182, 0, 104755299, 104755299, 0, 102261126, 102261126, 0, 99882960, 99882960, 0, 97612893, 97612893, 0, 95443717, 95443717, 0, 93368854, 93368854, 0, 91382282, 91382282, 0, 89478485, 89478485, 0, 87652393, 87652393, 0, 85899345, 85899345, 0, 84215045, 84215045, 0, 82595524, 82595524, 0, 81037118, 81037118, 0, 79536431, 79536431, 0, 78090314, 78090314, 0, 76695844, 76695844, 0, 75350303, 75350303, 0, 74051160, 74051160, 0, 72796055, 72796055, 0, 71582788, 71582788, 0, 70409299, 70409299, 0, 69273666, 69273666, 0, 68174084, 68174084, 0, Integer.MIN_VALUE, 0, 5};
+    private final long[] b;
+    private final int c;
+    private final long d;
+    private final int e;
+    private final int f;
+    private final int g;
+    private final int h;
+    private final int i;
+
+    public DataBits(int i, int j) {
+        this(i, j, (long[]) null);
+    }
+
+    public DataBits(int i, int j, @Nullable long[] along) {
+        Validate.inclusiveBetween(1L, 32L, (long) i);
+        this.e = j;
+        this.c = i;
+        this.d = (1L << i) - 1L;
+        this.f = (char) (64 / i);
+        int k = 3 * (this.f - 1);
+
+        this.g = DataBits.a[k + 0];
+        this.h = DataBits.a[k + 1];
+        this.i = DataBits.a[k + 2];
+        int l = (j + this.f - 1) / this.f;
+
+        if (along != null) {
+            if (along.length != l) {
+                throw (RuntimeException) SystemUtils.c((Throwable) (new RuntimeException("Invalid length given for storage, got: " + along.length + " but expected: " + l)));
+            }
+
+            this.b = along;
+        } else {
+            this.b = new long[l];
+        }
+
+    }
+
+    private int b(int i) {
+        long j = Integer.toUnsignedLong(this.g);
+        long k = Integer.toUnsignedLong(this.h);
+
+        return (int) ((long) i * j + k >> 32 >> this.i);
+    }
+
+    public int a(int i, int j) {
+        Validate.inclusiveBetween(0L, (long) (this.e - 1), (long) i);
+        Validate.inclusiveBetween(0L, this.d, (long) j);
+        int k = this.b(i);
+        long l = this.b[k];
+        int i1 = (i - k * this.f) * this.c;
+        int j1 = (int) (l >> i1 & this.d);
+
+        this.b[k] = l & ~(this.d << i1) | ((long) j & this.d) << i1;
+        return j1;
+    }
+
+    public void b(int i, int j) {
+        Validate.inclusiveBetween(0L, (long) (this.e - 1), (long) i);
+        Validate.inclusiveBetween(0L, this.d, (long) j);
+        int k = this.b(i);
+        long l = this.b[k];
+        int i1 = (i - k * this.f) * this.c;
+
+        this.b[k] = l & ~(this.d << i1) | ((long) j & this.d) << i1;
+    }
+
+    public int a(int i) {
+        Validate.inclusiveBetween(0L, (long) (this.e - 1), (long) i);
+        int j = this.b(i);
+        long k = this.b[j];
+        int l = (i - j * this.f) * this.c;
+
+        return (int) (k >> l & this.d);
+    }
+
+    public long[] a() {
+        return this.b;
+    }
+
+    public int b() {
+        return this.e;
+    }
+
+    public void a(IntConsumer intconsumer) {
+        int i = 0;
+        long[] along = this.b;
+        int j = along.length;
+
+        for (int k = 0; k < j; ++k) {
+            long l = along[k];
+
+            for (int i1 = 0; i1 < this.f; ++i1) {
+                intconsumer.accept((int) (l & this.d));
+                l >>= this.c;
+                ++i;
+                if (i >= this.e) {
+                    return;
+                }
+            }
+        }
+
+    }
+}
-- 
2.28.0.windows.1

