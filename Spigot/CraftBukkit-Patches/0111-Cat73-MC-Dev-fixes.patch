From f75d612cd6572e35eeded016292b92252b805f17 Mon Sep 17 00:00:00 2001
From: Cat73 <root@cat73.org>
Date: Sat, 10 Aug 2019 14:42:06 +0800
Subject: [PATCH] Cat73 -> MC Dev fixes


diff --git a/src/main/java/net/minecraft/server/RemoteControlSession.java b/src/main/java/net/minecraft/server/RemoteControlSession.java
index 773f8ef3a..c28a034fe 100644
--- a/src/main/java/net/minecraft/server/RemoteControlSession.java
+++ b/src/main/java/net/minecraft/server/RemoteControlSession.java
@@ -32,12 +32,8 @@ public class RemoteControlSession extends RemoteConnectionThread {
     }
 
     public void run() {
-        while (true) {
-            try {
-                if (!this.a) {
-                    return;
-                }
-
+        try {
+            while (this.a) {
                 BufferedInputStream bufferedinputstream = new BufferedInputStream(this.j.getInputStream());
                 int i = bufferedinputstream.read(this.k, 0, 1460);
 
@@ -45,62 +41,57 @@ public class RemoteControlSession extends RemoteConnectionThread {
                     return;
                 }
 
-                byte b0 = 0;
                 int j = StatusChallengeUtils.b(this.k, 0, i);
 
-                if (j == i - 4) {
-                    int k = b0 + 4;
-                    int l = StatusChallengeUtils.b(this.k, k, i);
-
-                    k += 4;
-                    int i1 = StatusChallengeUtils.a(this.k, k);
-
-                    k += 4;
-                    switch (i1) {
-                        case 2:
-                            if (this.i) {
-                                String s = StatusChallengeUtils.a(this.k, k, i);
-
-                                try {
-                                    this.a(l, this.b.executeRemoteCommand(s));
-                                } catch (Exception exception) {
-                                    this.a(l, "Error executing: " + s + " (" + exception.getMessage() + ")");
-                                }
-                                continue;
+                if (j != i - 4) {
+                    return;
+                }
+                int k = 4;
+                int l = StatusChallengeUtils.b(this.k, k, i);
+
+                k += 4;
+                int i1 = StatusChallengeUtils.a(this.k, k);
+
+                k += 4;
+                switch (i1) {
+                    case 2:
+                        if (this.i) {
+                            String s = StatusChallengeUtils.a(this.k, k, i);
+
+                            try {
+                                this.a(l, this.b.executeRemoteCommand(s));
+                            } catch (Exception exception) {
+                                this.a(l, "Error executing: " + s + " (" + exception.getMessage() + ")");
                             }
-
-                            this.f();
                             continue;
-                        case 3:
-                            String s1 = StatusChallengeUtils.a(this.k, k, i);
-                            int j1 = k + s1.length();
-
-                            if (!s1.isEmpty() && s1.equals(this.l)) {
-                                this.i = true;
-                                this.a(l, 2, "");
-                                continue;
-                            }
+                        }
 
-                            this.i = false;
-                            this.f();
-                            continue;
-                        default:
-                            this.a(l, String.format("Unknown request %s", Integer.toHexString(i1)));
+                        this.f();
+                        continue;
+                    case 3:
+                        String s1 = StatusChallengeUtils.a(this.k, k, i);
+                        int j1 = k + s1.length();
+
+                        if (!s1.isEmpty() && s1.equals(this.l)) {
+                            this.i = true;
+                            this.a(l, 2, "");
                             continue;
-                    }
+                        }
+
+                        this.i = false;
+                        this.f();
+                        continue;
+                    default:
+                        this.a(l, String.format("Unknown request %s", Integer.toHexString(i1)));
+                        continue;
                 }
-            } catch (SocketTimeoutException sockettimeoutexception) {
-                return;
-            } catch (IOException ioexception) {
-                return;
-            } catch (Exception exception1) {
-                RemoteControlSession.LOGGER.error("Exception whilst parsing RCON input", exception1);
-                return;
-            } finally {
-                this.g();
             }
-
-            return;
+        } catch (SocketTimeoutException sockettimeoutexception) {
+        } catch (IOException ioexception) {
+        } catch (Exception exception1) {
+            RemoteControlSession.LOGGER.error("Exception whilst parsing RCON input", exception1);
+        } finally {
+            this.g();
         }
     }
 
-- 
2.22.0

