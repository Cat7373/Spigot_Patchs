From 67ed504cd20aa3ea8fe2de94549a22e6ec8f514d Mon Sep 17 00:00:00 2001
From: Cat73 <1901803382@qq.com>
Date: Tue, 12 Apr 2016 14:08:12 +0800
Subject: [PATCH] Cat73 -> Change implementation of (tile)entity removal list
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

将需被卸载的实体列表由 ArrayList 修改为 Set 存储，这个列表完全没有必要有顺序，维护一个无序列表能节约一些资源。
Link：https://github.com/PaperMC/Paper/blob/c8643cef2eb0fe2c315b950728441791a397b0c0/Spigot-Server-Patches/0067-Change-implementation-of-tile-entity-removal-list.patch

diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 01e4f45..3e3f5d1 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -119,10 +119,10 @@ public abstract class Entity implements ICommandListener {
     private static final DataWatcherObject<Boolean> aB = DataWatcher.a(Entity.class, DataWatcherRegistry.h);
     private static final DataWatcherObject<Boolean> aC = DataWatcher.a(Entity.class, DataWatcherRegistry.h);
     private static final DataWatcherObject<Boolean> aD = DataWatcher.a(Entity.class, DataWatcherRegistry.h);
-    public boolean ab;
-    public int ac;
-    public int ad;
-    public int ae;
+    public boolean ab; public boolean isAddedToChunk() { return ab; } // Paper - OBFHELPER
+    public int ac; public int getChunkX() { return ac; } // Paper - OBFHELPER
+    public int ad; public int getChunkY() { return ad; } // Paper - OBFHELPER
+    public int ae; public int getChunkZ() { return ae; } // Paper - OBFHELPER
     public boolean ai;
     public boolean impulse;
     public int portalCooldown;
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index f5ab0e8..b39f92e 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -29,6 +29,11 @@ import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 import org.bukkit.generator.ChunkGenerator;
 // CraftBukkit end
 
+// Paper start
+import java.util.Set;
+import com.google.common.collect.Sets;
+// Paper end
+
 public abstract class World implements IBlockAccess {
 
     private int a = 63;
@@ -59,11 +64,11 @@ public abstract class World implements IBlockAccess {
         }
     };
     // Spigot end
-    protected final List<Entity> f = Lists.newArrayList();
+    protected final Set<Entity> f = Sets.newHashSet(); // Paper
     public final List<TileEntity> tileEntityList = Lists.newArrayList();
     public final List<TileEntity> tileEntityListTick = Lists.newArrayList();
     private final List<TileEntity> b = Lists.newArrayList();
-    private final List<TileEntity> tileEntityListUnload = Lists.newArrayList();
+    private final Set<TileEntity> tileEntityListUnload = Sets.newHashSet(); // Paper
     public final List<EntityHuman> players = Lists.newArrayList();
     public final List<Entity> j = Lists.newArrayList();
     protected final IntHashMap<Entity> entitiesById = new IntHashMap();
@@ -1379,20 +1384,20 @@ public abstract class World implements IBlockAccess {
         this.entityList.removeAll(this.f);
 
         int j;
+        // Paper start - Set based removal lists
+        for (Entity e : this.f) {
+            j = e.getChunkZ();
+            int k = e.getChunkX();
 
-        for (i = 0; i < this.f.size(); ++i) {
-            entity = (Entity) this.f.get(i);
-            int k = entity.ac;
-
-            j = entity.ae;
-            if (entity.ab && this.isChunkLoaded(k, j, true)) {
-                this.getChunkAt(k, j).b(entity);
+            if (e.isAddedToChunk() && this.isChunkLoaded(k, j, true)) {
+                this.getChunkAt(k, j).b(e);
             }
         }
 
-        for (i = 0; i < this.f.size(); ++i) {
-            this.c((Entity) this.f.get(i));
+        for (Entity e : this.f) {
+            this.c(e);
         }
+        // Paper end
 
         this.f.clear();
         this.l();
-- 
2.9.0.windows.1

