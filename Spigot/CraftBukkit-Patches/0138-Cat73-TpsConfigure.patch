From 443c79ed9572937271836e012f45b58dab09f14f Mon Sep 17 00:00:00 2001
From: Cat73 <root@cat73.org>
Date: Sat, 3 Nov 2018 13:47:10 +0800
Subject: [PATCH] Cat73 -> TpsConfigure
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

根据不同的 TPS 设定不同的服务器限制参数，虽然这种控制有些滞后，但能缓解 TPS 下降的情况，防止 TPS 继续降低

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 5be51b692..fc3ebb12b 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -157,6 +157,7 @@ public abstract class MinecraftServer implements IAsyncTaskHandler, IMojangStati
     public static final int TICK_TIME = 1000000000 / TPS;
     private static final int SAMPLE_INTERVAL = 100;
     public final double[] recentTps = new double[ 3 ];
+    public double nowTps = 20.0D; // Cat73 nowTps
     public final SlackActivityAccountant slackActivityAccountant = new SlackActivityAccountant();
     // Spigot end
 
@@ -730,6 +731,9 @@ public abstract class MinecraftServer implements IAsyncTaskHandler, IMojangStati
                         recentTps[1] = calcTps( recentTps[1], 0.9835, currentTps ); // 1/exp(5sec/5min)
                         recentTps[2] = calcTps( recentTps[2], 0.9945, currentTps ); // 1/exp(5sec/15min)
                         tickSection = curTime;
+
+                        this.tpsConfigure(currentTps, recentTps[0]);
+                        this.nowTps = currentTps; // Cat73 nowTps
                     }
                     lastTick = curTime;
 
@@ -788,6 +792,200 @@ public abstract class MinecraftServer implements IAsyncTaskHandler, IMojangStati
 
     }
 
+    // Cat73 Start
+    /**
+     * 不同 TPS 下的限制值
+     */
+    // TODO reload 时设置为 null
+    public List<TpsConfigure> tpsConfigures;
+    /**
+     * 上次的限制值
+     */
+    public TpsConfigure lastLimit;
+
+    public static class TpsConfigure {
+        private static final CraftServer craftServer = (CraftServer) Bukkit.getServer();
+
+        public final double minTps;
+        public final double rate;
+
+        // bukkit.yml
+        // spawn-limits
+        private final int spawnLimitsMonsters;
+        private final int spawnLimitsAnimals;
+        private final int spawnLimitsWaterAnimals;
+        private final int spawnLimitsAmbient;
+        // ticks-per
+        private final int ticksPerAnimalSpawns;
+        private final int ticksPerMonsterSpawns;
+
+        // spigot.yml
+        // TODO no default?
+        // world-settings.default.entity-activation-range
+        private final int entityActivationRangeAnimals;
+        private final int entityActivationRangeMonsters;
+        private final int entityActivationRangeMisc;
+        // world-settings.default.max-tick-time
+        private final int tileMaxTickTime;
+        private final int entityMaxTickTime;
+        // world-settings.default.max-tnt-per-tick
+        private final int maxTntTicksPerTick;
+
+        private TpsConfigure(double minTps, double rate, int spawnLimitsMonsters, int spawnLimitsAnimals, int spawnLimitsWaterAnimals,
+                int spawnLimitsAmbient, int ticksPerAnimalSpawns, int ticksPerMonsterSpawns, int entityActivationRangeAnimals,
+                int entityActivationRangeMonsters, int entityActivationRangeMisc, int tileMaxTickTime, int entityMaxTickTime,
+                int maxTntTicksPerTick) {
+            this.minTps = minTps;
+            this.rate = rate;
+            this.spawnLimitsMonsters = spawnLimitsMonsters;
+            this.spawnLimitsAnimals = spawnLimitsAnimals;
+            this.spawnLimitsWaterAnimals = spawnLimitsWaterAnimals;
+            this.spawnLimitsAmbient = spawnLimitsAmbient;
+            this.ticksPerAnimalSpawns = ticksPerAnimalSpawns;
+            this.ticksPerMonsterSpawns = ticksPerMonsterSpawns;
+            this.entityActivationRangeAnimals = entityActivationRangeAnimals;
+            this.entityActivationRangeMonsters = entityActivationRangeMonsters;
+            this.entityActivationRangeMisc = entityActivationRangeMisc;
+            this.tileMaxTickTime = tileMaxTickTime;
+            this.entityMaxTickTime = entityMaxTickTime;
+            this.maxTntTicksPerTick = maxTntTicksPerTick;
+        }
+
+        private TpsConfigure(double minTps, double rate, CraftServer craftServer, org.spigotmc.SpigotWorldConfig spigotWorldConfig) {
+            this(
+                    minTps,
+                    rate,
+                    subLimit(craftServer.monsterSpawn, rate, 1),
+                    subLimit(craftServer.animalSpawn, rate, 1),
+                    subLimit(craftServer.waterAnimalSpawn, rate, 1),
+                    subLimit(craftServer.ambientSpawn, rate, 1),
+                    addLimit(craftServer.getTicksPerAnimalSpawns(), rate),
+                    addLimit(craftServer.getTicksPerMonsterSpawns(), rate),
+                    subLimit(spigotWorldConfig.animalActivationRange, rate, 1),
+                    subLimit(spigotWorldConfig.monsterActivationRange, rate, 1),
+                    subLimit(spigotWorldConfig.miscActivationRange, rate, 1),
+                    subLimit(spigotWorldConfig.tileMaxTickTime, rate, 15),
+                    subLimit(spigotWorldConfig.entityMaxTickTime, rate, 15),
+                    subLimit(spigotWorldConfig.maxTntTicksPerTick, rate, 1)
+            );
+        }
+
+        private static int subLimit(int limit, double rate, int min) {
+            return Math.max((int) Math.round(limit * rate), limit < min ? limit : min);
+        }
+
+        private static int addLimit(int limit, double rate) {
+            return (int) Math.round(limit / rate);
+        }
+
+        private void apply() {
+            craftServer.monsterSpawn = this.spawnLimitsMonsters;
+            craftServer.animalSpawn = this.spawnLimitsAnimals;
+            craftServer.waterAnimalSpawn = this.spawnLimitsWaterAnimals;
+            craftServer.ambientSpawn = this.spawnLimitsAmbient;
+
+            craftServer.getWorlds().stream()
+                    .map(w -> ((org.bukkit.craftbukkit.CraftWorld) w).getHandle())
+                    .forEach(w -> {
+                        org.spigotmc.SpigotWorldConfig spigotWorldConfig = w.spigotConfig;
+
+                        spigotWorldConfig.animalActivationRange = this.entityActivationRangeAnimals;
+                        spigotWorldConfig.monsterActivationRange = this.entityActivationRangeMonsters;
+                        spigotWorldConfig.miscActivationRange = this.entityActivationRangeMisc;
+                        w.tileLimiter = new org.spigotmc.TickLimiter(this.tileMaxTickTime);
+                        w.entityLimiter = new org.spigotmc.TickLimiter(this.entityMaxTickTime);
+                        spigotWorldConfig.maxTntTicksPerTick = this.maxTntTicksPerTick;
+
+                        w.ticksPerAnimalSpawns = this.ticksPerAnimalSpawns;
+                        w.ticksPerMonsterSpawns = this.ticksPerMonsterSpawns;
+                    });
+        }
+
+        @Override
+        public String toString() {
+            return "minTps: " + minTps +
+                    ", rate: " + rate +
+                    ", spawnLimitsMonsters: " + spawnLimitsMonsters +
+                    ", spawnLimitsAnimals: " + spawnLimitsAnimals +
+                    ", spawnLimitsWaterAnimals: " + spawnLimitsWaterAnimals +
+                    ", spawnLimitsAmbient: " + spawnLimitsAmbient +
+                    ", ticksPerAnimalSpawns: " + ticksPerAnimalSpawns +
+                    ", ticksPerMonsterSpawns: " + ticksPerMonsterSpawns +
+                    ", entityActivationRangeAnimals: " + entityActivationRangeAnimals +
+                    ", entityActivationRangeMonsters: " + entityActivationRangeMonsters +
+                    ", entityActivationRangeMisc: " + entityActivationRangeMisc +
+                    ", tileMaxTickTime: " + tileMaxTickTime +
+                    ", entityMaxTickTime: " + entityMaxTickTime +
+                    ", maxTntTicksPerTick: " + maxTntTicksPerTick;
+        }
+    }
+
+    /**
+     * 初始化不同 TPS 下的限制值
+     */
+    private void initTpsConfigure() {
+        if (this.tpsConfigures != null) {
+            return;
+        }
+
+        CraftServer craftServer = (CraftServer) Bukkit.getServer();
+        WorldServer world = ((org.bukkit.craftbukkit.CraftWorld) craftServer.getWorlds().get(0)).getHandle();
+        org.spigotmc.SpigotWorldConfig spigotWorldConfig = world.spigotConfig;
+
+        this.tpsConfigures = Arrays.asList(
+            // 18 ~ 20 1.00x
+            new TpsConfigure(18.0D, 1.00D, craftServer, spigotWorldConfig),
+            // 16 ~ 18 0.92x
+            new TpsConfigure(16.0D, 0.92D, craftServer, spigotWorldConfig),
+            // 14 ~ 16 0.80x
+            new TpsConfigure(14.0D, 0.80D, craftServer, spigotWorldConfig),
+            // 12 ~ 14 0.68x
+            new TpsConfigure(12.0D, 0.68D, craftServer, spigotWorldConfig),
+            // 10 ~ 12 0.56x
+            new TpsConfigure(10.0D, 0.56D, craftServer, spigotWorldConfig),
+            // 8 ~ 10 0.44x
+            new TpsConfigure(8.0D, 0.44D, craftServer, spigotWorldConfig),
+            // 5 ~ 8 0.32x
+            new TpsConfigure(5.0D, 0.32D, craftServer, spigotWorldConfig),
+            // 3 ~ 5 0.20x
+            new TpsConfigure(3.0D, 0.20D, craftServer, spigotWorldConfig),
+            // 0 ~ 3 0.08x
+            new TpsConfigure(Double.MIN_VALUE, 0.08D, craftServer, spigotWorldConfig)
+        );
+    }
+
+    /**
+     * 根据当前的 TPS 重设各类参数限制
+     */
+    private void tpsConfigure(double... tpsList) {
+        this.initTpsConfigure();
+
+        double minTps = 20.0;
+        for (double t : tpsList) {
+            minTps = Math.min(minTps, t);
+        }
+        double tps = minTps;
+
+        this.tpsConfigures.stream()
+                .filter(c -> tps > c.minTps)
+                .findFirst()
+                .filter(c -> c != this.lastLimit)
+                .ifPresent(c -> {
+                    // 如果是上升，则每次最多允许上升一级
+                    TpsConfigure newConfigure = c;
+                    int lastIdx = this.tpsConfigures.indexOf(this.lastLimit);
+                    int newIdx = this.tpsConfigures.indexOf(newConfigure);
+                    if (newIdx - lastIdx < -1) {
+                        int useIdx = lastIdx - 1;
+                        newConfigure = this.tpsConfigures.get(useIdx);
+                    }
+
+                    newConfigure.apply();
+                    this.lastLimit = newConfigure;
+                });
+    }
+    // Cat73 End
+
     public void a(ServerPing serverping) {
         File file = this.c("server-icon.png");
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index e1da92cf8..33d7328c9 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -138,8 +138,12 @@ public abstract class World implements IEntityAccess, GeneratorAccess, IIBlockAc
     private boolean guardEntityList; // Spigot
     public static boolean haveWeSilencedAPhysicsCrash;
     public static String blockLocation;
-    private org.spigotmc.TickLimiter entityLimiter;
-    private org.spigotmc.TickLimiter tileLimiter;
+    // Cat73 Start
+    protected long animalSpawnsCD;
+    protected long monsterSpawnsCD;
+    public org.spigotmc.TickLimiter entityLimiter;
+    public org.spigotmc.TickLimiter tileLimiter;
+    // Cat73 End
     private int tileTickPosition;
 
     public CraftWorld getWorld() {
@@ -160,6 +164,8 @@ public abstract class World implements IEntityAccess, GeneratorAccess, IIBlockAc
         this.world = new CraftWorld((WorldServer) this, gen, env);
         this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
         this.ticksPerMonsterSpawns = this.getServer().getTicksPerMonsterSpawns(); // CraftBukkit
+        this.animalSpawnsCD = this.ticksPerAnimalSpawns; // Cat73
+        this.monsterSpawnsCD = this.ticksPerMonsterSpawns; // Cat73
         // CraftBukkit end
         this.v = Lists.newArrayList(new IWorldAccess[] { this.u});
         this.allowMonsters = true;
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 74a61f300..65cfc1b92 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -275,8 +275,26 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         long time = this.worldData.getTime();
         if (this.getGameRules().getBoolean("doMobSpawning") && this.worldData.getType() != WorldType.DEBUG_ALL_BLOCK_STATES && (this.allowMonsters || this.allowAnimals) && (this instanceof WorldServer && this.players.size() > 0)) {
             timings.mobSpawn.startTiming(); // Spigot
-            this.spawnerCreature.a(this, this.allowMonsters && (this.ticksPerMonsterSpawns != 0 && time % this.ticksPerMonsterSpawns == 0L), this.allowAnimals && (this.ticksPerAnimalSpawns != 0 && time % this.ticksPerAnimalSpawns == 0L), this.worldData.getTime() % 400L == 0L);
-            this.getChunkProviderServer().a(this, this.allowMonsters && (this.ticksPerMonsterSpawns != 0 && time % this.ticksPerMonsterSpawns == 0L), this.allowAnimals && (this.ticksPerAnimalSpawns != 0 && time % this.ticksPerAnimalSpawns == 0L));
+            // Cat73 start
+            boolean spawnMonster = this.allowMonsters;
+            if (spawnMonster && this.ticksPerMonsterSpawns != 0) {
+                spawnMonster = (--this.monsterSpawnsCD <= 0);
+                if (spawnMonster) {
+                    this.monsterSpawnsCD = this.ticksPerMonsterSpawns;
+                }
+            }
+
+            boolean spawnAnimals = this.allowAnimals;
+            if (spawnAnimals && this.ticksPerAnimalSpawns != 0) {
+                spawnAnimals = (--this.animalSpawnsCD <= 0);
+                if (spawnAnimals) {
+                    this.animalSpawnsCD = this.ticksPerAnimalSpawns;
+                }
+            }
+
+            this.spawnerCreature.a(this, spawnMonster, spawnAnimals, this.worldData.getTime() % 400L == 0L);
+            this.getChunkProviderServer().a(this, spawnMonster, spawnAnimals);
+            // Cat73 end
             timings.mobSpawn.stopTiming(); // Spigot
             // CraftBukkit end
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 472b233bb..7bdbc114e 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -179,10 +179,12 @@ public final class CraftServer implements Server {
     private final EntityMetadataStore entityMetadata = new EntityMetadataStore();
     private final PlayerMetadataStore playerMetadata = new PlayerMetadataStore();
     private final WorldMetadataStore worldMetadata = new WorldMetadataStore();
-    private int monsterSpawn = -1;
-    private int animalSpawn = -1;
-    private int waterAnimalSpawn = -1;
-    private int ambientSpawn = -1;
+    // Cat73 Start
+    public int monsterSpawn = -1;
+    public int animalSpawn = -1;
+    public int waterAnimalSpawn = -1;
+    public int ambientSpawn = -1;
+    // Cat73 End
     public int chunkGCPeriod = -1;
     public int chunkGCLoadThresh = 0;
     private File container;
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index be2e31dea..46f0457ca 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -26,7 +26,15 @@ public class TicksPerSecondCommand extends Command
             return true;
         }
 
-        StringBuilder sb = new StringBuilder( ChatColor.GOLD + "TPS from last 1m, 5m, 15m: " );
+        // Cat73 Start
+        StringBuilder sb = new StringBuilder(ChatColor.GOLD + "TPS from last 5s, 1m, 5m, 15m: ")
+                .append(format(MinecraftServer.getServer().nowTps))
+                .append("(")
+                .append(MinecraftServer.getServer().lastLimit.minTps)
+                .append(", ")
+                .append(MinecraftServer.getServer().lastLimit.rate)
+                .append("), ");
+        // Cat73 End
         for ( double tps : MinecraftServer.getServer().recentTps )
         {
             sb.append( format( tps ) );
-- 
2.19.1

