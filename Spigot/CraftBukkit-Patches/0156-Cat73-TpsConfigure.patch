From aff3f9f078ba936d88e937f5ad114c0953215f79 Mon Sep 17 00:00:00 2001
From: Cat73 <cat7373x@gmail.com>
Date: Mon, 18 Jun 2018 13:02:26 +0800
Subject: [PATCH] Cat73 -> TpsConfigure
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

根据不同的 TPS 设定不同的服务器限制参数，虽然这种控制有些滞后，但应该能缓解 TPS 下降的情况，防止 TPS 继续降低

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 7bcfd7f7..4d518bf7 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -572,6 +572,8 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
                         recentTps[1] = calcTps( recentTps[1], 0.9835, currentTps ); // 1/exp(5sec/5min)
                         recentTps[2] = calcTps( recentTps[2], 0.9945, currentTps ); // 1/exp(5sec/15min)
                         tickSection = curTime;
+
+                        this.tpsConfigure(currentTps);
                     }
                     lastTick = curTime;
 
@@ -628,6 +630,191 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IAs
 
     }
 
+    // Cat73 Start
+    /**
+     * 不同 TPS 下的限制值
+     */
+    // TODO reload 时设置为 null
+    public List<TpsConfigure> tpsConfigures;
+    /**
+     * 上次的限制值
+     */
+    private TpsConfigure lastLimit;
+
+    private static class TpsConfigure {
+        private static final CraftServer craftServer = (CraftServer) Bukkit.getServer();
+
+        private final double minTps;
+        private final double rate;
+
+        // bukkit.yml
+        // spawn-limits
+        private final int spawnLimitsMonsters;
+        private final int spawnLimitsAnimals;
+        private final int spawnLimitsWaterAnimals;
+        private final int spawnLimitsAmbient;
+        // ticks-per
+        private final int ticksPerAnimalSpawns;
+        private final int ticksPerMonsterSpawns;
+
+        // spigot.yml
+        // TODO no default?
+        // world-settings.default.entity-activation-range
+        private final int entityActivationRangeAnimals;
+        private final int entityActivationRangeMonsters;
+        private final int entityActivationRangeMisc;
+        // world-settings.default.max-tick-time
+        private final int maxTickTimeTile;
+        private final int maxTickTimeEntity;
+
+        private TpsConfigure(double minTps, double rate, int spawnLimitsMonsters, int spawnLimitsAnimals, int spawnLimitsWaterAnimals,
+                int spawnLimitsAmbient, int ticksPerAnimalSpawns, int ticksPerMonsterSpawns, int entityActivationRangeAnimals,
+                int entityActivationRangeMonsters, int entityActivationRangeMisc, int maxTickTimeTile, int maxTickTimeEntity) {
+            this.minTps = minTps;
+            this.rate = rate;
+            this.spawnLimitsMonsters = spawnLimitsMonsters;
+            this.spawnLimitsAnimals = spawnLimitsAnimals;
+            this.spawnLimitsWaterAnimals = spawnLimitsWaterAnimals;
+            this.spawnLimitsAmbient = spawnLimitsAmbient;
+            this.ticksPerAnimalSpawns = ticksPerAnimalSpawns;
+            this.ticksPerMonsterSpawns = ticksPerMonsterSpawns;
+            this.entityActivationRangeAnimals = entityActivationRangeAnimals;
+            this.entityActivationRangeMonsters = entityActivationRangeMonsters;
+            this.entityActivationRangeMisc = entityActivationRangeMisc;
+            this.maxTickTimeTile = maxTickTimeTile;
+            this.maxTickTimeEntity = maxTickTimeEntity;
+        }
+
+        private TpsConfigure(double minTps, double rate, CraftServer craftServer, org.spigotmc.SpigotWorldConfig spigotWorldConfig) {
+            this(
+                    minTps,
+                    rate,
+                    subLimit(craftServer.monsterSpawn, rate, 1),
+                    subLimit(craftServer.animalSpawn, rate, 1),
+                    subLimit(craftServer.waterAnimalSpawn, rate, 1),
+                    subLimit(craftServer.ambientSpawn, rate, 1),
+                    addLimit(craftServer.getTicksPerAnimalSpawns(), rate),
+                    addLimit(craftServer.getTicksPerMonsterSpawns(), rate),
+                    subLimit(spigotWorldConfig.animalActivationRange, rate, 1),
+                    subLimit(spigotWorldConfig.monsterActivationRange, rate, 1),
+                    subLimit(spigotWorldConfig.miscActivationRange, rate, 1),
+                    subLimit(spigotWorldConfig.tileMaxTickTime, rate, 15),
+                    subLimit(spigotWorldConfig.entityMaxTickTime, rate, 15)
+            );
+        }
+
+        private static int subLimit(int limit, double rate, int min) {
+            return Math.max((int) Math.round(limit * rate), limit < min ? limit : min);
+        }
+
+        private static int addLimit(int limit, double rate) {
+            return (int) Math.round(limit / rate);
+        }
+
+        private void apply() {
+            craftServer.monsterSpawn = this.spawnLimitsMonsters;
+            craftServer.animalSpawn = this.spawnLimitsAnimals;
+            craftServer.waterAnimalSpawn = this.spawnLimitsWaterAnimals;
+            craftServer.ambientSpawn = this.spawnLimitsAmbient;
+
+            craftServer.getWorlds().stream()
+                    .map(w -> ((org.bukkit.craftbukkit.CraftWorld) w).getHandle())
+                    .forEach(w -> {
+                        org.spigotmc.SpigotWorldConfig spigotWorldConfig = w.spigotConfig;
+
+                        spigotWorldConfig.animalActivationRange = this.entityActivationRangeAnimals;
+                        spigotWorldConfig.monsterActivationRange = this.entityActivationRangeMonsters;
+                        spigotWorldConfig.miscActivationRange = this.entityActivationRangeMisc;
+                        spigotWorldConfig.tileMaxTickTime = this.maxTickTimeTile;
+                        spigotWorldConfig.entityMaxTickTime = this.maxTickTimeEntity;
+
+                        w.ticksPerAnimalSpawns = this.ticksPerAnimalSpawns;
+                        w.ticksPerMonsterSpawns = this.ticksPerMonsterSpawns;
+                    });
+        }
+
+        @Override
+        public String toString() {
+            return "minTps: " + minTps +
+                    ", rate: " + rate +
+                    ", spawnLimitsMonsters: " + spawnLimitsMonsters +
+                    ", spawnLimitsAnimals: " + spawnLimitsAnimals +
+                    ", spawnLimitsWaterAnimals: " + spawnLimitsWaterAnimals +
+                    ", spawnLimitsAmbient: " + spawnLimitsAmbient +
+                    ", ticksPerAnimalSpawns: " + ticksPerAnimalSpawns +
+                    ", ticksPerMonsterSpawns: " + ticksPerMonsterSpawns +
+                    ", entityActivationRangeAnimals: " + entityActivationRangeAnimals +
+                    ", entityActivationRangeMonsters: " + entityActivationRangeMonsters +
+                    ", entityActivationRangeMisc: " + entityActivationRangeMisc +
+                    ", maxTickTimeTile: " + maxTickTimeTile +
+                    ", maxTickTimeEntity: " + maxTickTimeEntity;
+        }
+    }
+
+    /**
+     * 初始化不同 TPS 下的限制值
+     */
+    private void initTpsConfigure() {
+        if (this.tpsConfigures != null) {
+            return;
+        }
+
+        CraftServer craftServer = (CraftServer) Bukkit.getServer();
+        WorldServer world = ((org.bukkit.craftbukkit.CraftWorld) craftServer.getWorlds().get(0)).getHandle();
+        org.spigotmc.SpigotWorldConfig spigotWorldConfig = world.spigotConfig;
+
+        this.tpsConfigures = Arrays.asList(
+            // 18 ~ 20 1.00x
+            new TpsConfigure(18.0D, 1.00D, craftServer, spigotWorldConfig),
+            // 16 ~ 18 0.92x
+            new TpsConfigure(16.0D, 0.92D, craftServer, spigotWorldConfig),
+            // 14 ~ 16 0.80x
+            new TpsConfigure(14.0D, 0.80D, craftServer, spigotWorldConfig),
+            // 12 ~ 14 0.68x
+            new TpsConfigure(12.0D, 0.68D, craftServer, spigotWorldConfig),
+            // 10 ~ 12 0.56x
+            new TpsConfigure(10.0D, 0.56D, craftServer, spigotWorldConfig),
+            // 8 ~ 10 0.44x
+            new TpsConfigure(8.0D, 0.44D, craftServer, spigotWorldConfig),
+            // 5 ~ 8 0.35x
+            new TpsConfigure(5.0D, 0.35D, craftServer, spigotWorldConfig),
+            // 3 ~ 5 0.25x
+            new TpsConfigure(3.0D, 0.25D, craftServer, spigotWorldConfig),
+            // 0 ~ 3 0.10x
+            new TpsConfigure(Double.MIN_VALUE, 0.10D, craftServer, spigotWorldConfig)
+        );
+
+        this.tpsConfigures
+                .forEach(c -> MinecraftServer.LOGGER.info("[TpsConfigure] addLimit: {}", c));
+    }
+
+    /**
+     * 根据当前的 TPS 重设各类参数限制
+     */
+    private void tpsConfigure(double tps) {
+        this.initTpsConfigure();
+
+        this.tpsConfigures.stream()
+                .filter(c -> tps > c.minTps)
+                .findFirst()
+                .filter(c -> c != this.lastLimit)
+                .ifPresent(c -> {
+                    TpsConfigure newConfigure = c;
+                    int lastIdx = this.tpsConfigures.indexOf(this.lastLimit);
+                    int newIdx = this.tpsConfigures.indexOf(newConfigure);
+                    if (newIdx - lastIdx < -1) {
+                        int useIdx = lastIdx - 1;
+                        newConfigure = this.tpsConfigures.get(useIdx);
+                    }
+
+                    MinecraftServer.LOGGER.info("[TpsConfigure] TPS: {}, useMinTps: {}, useRate: {}", tps, c.minTps, c.rate);
+
+                    newConfigure.apply();
+                    this.lastLimit = newConfigure;
+                });
+    }
+    // Cat73 End
+
     public void a(ServerPing serverping) {
         File file = this.d("server-icon.png");
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 5ab7cee1..5d6ae5ef 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -156,10 +156,12 @@ public final class CraftServer implements Server {
     private final EntityMetadataStore entityMetadata = new EntityMetadataStore();
     private final PlayerMetadataStore playerMetadata = new PlayerMetadataStore();
     private final WorldMetadataStore worldMetadata = new WorldMetadataStore();
-    private int monsterSpawn = -1;
-    private int animalSpawn = -1;
-    private int waterAnimalSpawn = -1;
-    private int ambientSpawn = -1;
+    // Cat73 Start
+    public int monsterSpawn = -1;
+    public int animalSpawn = -1;
+    public int waterAnimalSpawn = -1;
+    public int ambientSpawn = -1;
+    // Cat73 End
     public int chunkGCPeriod = -1;
     public int chunkGCLoadThresh = 0;
     private File container;
-- 
2.15.2 (Apple Git-101.1)

