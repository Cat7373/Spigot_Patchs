From 202e838b4f07d4e04e48e5246d12b6fb4f029279 Mon Sep 17 00:00:00 2001
From: Cat73 <root@cat73.org>
Date: Wed, 7 Aug 2019 11:13:32 +0800
Subject: [PATCH] Cat73 -> Optimize Hoppers
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

漏斗优化在 API 层面做的改动

Link: https://github.com/PaperMC/Paper/blob/b6c32b2a159aa9adf982d4cdf5aada6c5d65396b/Spigot-API-Patches/0084-Optimize-Hoppers.patch

diff --git a/src/main/java/org/bukkit/event/Event.java b/src/main/java/org/bukkit/event/Event.java
index 18d0636b..8ec56cd6 100644
--- a/src/main/java/org/bukkit/event/Event.java
+++ b/src/main/java/org/bukkit/event/Event.java
@@ -35,6 +35,22 @@ public abstract class Event {
         this.async = isAsync;
     }
 
+    // Paper start
+    /**
+     * Calls the event and tests if cancelled.
+     *
+     * @return false if event was cancelled, if cancellable. otherwise true.
+     */
+    public boolean callEvent() {
+        org.bukkit.Bukkit.getPluginManager().callEvent(this);
+        if (this instanceof Cancellable) {
+            return !((Cancellable) this).isCancelled();
+        } else {
+            return true;
+        }
+    }
+    // Paper end
+
     /**
      * Convenience method for providing a user-friendly identifier. By
      * default, it is the event's class's {@linkplain Class#getSimpleName()
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
index a8c48f5a..04d4a83b 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
@@ -31,6 +31,8 @@ public class InventoryMoveItemEvent extends Event implements Cancellable {
     private final Inventory destinationInventory;
     private ItemStack itemStack;
     private final boolean didSourceInitiate;
+    public boolean calledGetItem; // Paper
+    public boolean calledSetItem; // Paper
 
     public InventoryMoveItemEvent(@NotNull final Inventory sourceInventory, @NotNull final ItemStack itemStack, @NotNull final Inventory destinationInventory, final boolean didSourceInitiate) {
         Validate.notNull(itemStack, "ItemStack cannot be null");
@@ -58,7 +60,8 @@ public class InventoryMoveItemEvent extends Event implements Cancellable {
      */
     @NotNull
     public ItemStack getItem() {
-        return itemStack.clone();
+        calledGetItem = true; // Paper - record this method was used for auto detection of mode
+        return itemStack; // Paper - Removed clone, handled better in Server
     }
 
     /**
@@ -70,6 +73,7 @@ public class InventoryMoveItemEvent extends Event implements Cancellable {
      */
     public void setItem(@NotNull ItemStack itemStack) {
         Validate.notNull(itemStack, "ItemStack cannot be null.  Cancel the event if you want nothing to be transferred.");
+        calledSetItem = true; // Paper - record this method was used for auto detection of mode
         this.itemStack = itemStack.clone();
     }
 
-- 
2.22.0

